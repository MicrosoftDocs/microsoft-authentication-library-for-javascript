### YamlMime:TSType
name: NodeStorage
uid: '@azure/msal-node.NodeStorage'
package: '@azure/msal-node'
summary: >-
  This class implements Storage for node, reading cache from user specified
  storage location or an  extension library
fullName: NodeStorage
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: 'NodeStorage(Logger, string, ICrypto)'
    uid: '@azure/msal-node.NodeStorage.constructor'
    package: '@azure/msal-node'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new NodeStorage(logger: Logger, clientId: string, cryptoImpl: ICrypto)'
      parameters:
        - id: logger
          type: Logger
          description: ''
        - id: clientId
          type: string
          description: ''
        - id: cryptoImpl
          type: ICrypto
          description: ''
inheritedMethods:
  - name: generateAuthorityMetadataCacheKey(string)
    uid: '@azure/msal-node.NodeStorage.generateAuthorityMetadataCacheKey'
    package: '@azure/msal-node'
    summary: returns cache key used for cloud instance metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function generateAuthorityMetadataCacheKey(authority: string): string'
      parameters:
        - id: authority
          type: string
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> CacheManager.generateAuthorityMetadataCacheKey
  - name: getAccountsFilteredBy(AccountFilter)
    uid: '@azure/msal-node.NodeStorage.getAccountsFilteredBy'
    package: '@azure/msal-node'
    summary: >-
      retrieve accounts matching all provided filters; if no filter is set, get
      all accounts

      not checking for casing as keys are all generated in lower case, remember
      to convert to lower case if object properties are compared
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountsFilteredBy(accountFilter?: AccountFilter):
        AccountCache
      parameters:
        - id: accountFilter
          type: AccountFilter
          description: ''
      return:
        description: ''
        type: AccountCache
    inheritanceDescription: <b>Inherited From</b> CacheManager.getAccountsFilteredBy
  - name: getAllAccounts()
    uid: '@azure/msal-node.NodeStorage.getAllAccounts'
    package: '@azure/msal-node'
    summary: Returns all accounts in cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllAccounts(): AccountInfo[]'
      return:
        description: ''
        type: 'AccountInfo[]'
    inheritanceDescription: <b>Inherited From</b> CacheManager.getAllAccounts
  - name: getAppMetadataFilteredBy(AppMetadataFilter)
    uid: '@azure/msal-node.NodeStorage.getAppMetadataFilteredBy'
    package: '@azure/msal-node'
    summary: >-
      retrieve appMetadata matching all provided filters; if no filter is set,
      get all appMetadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAppMetadataFilteredBy(filter: AppMetadataFilter):
        AppMetadataCache
      parameters:
        - id: filter
          type: AppMetadataFilter
          description: |+

      return:
        description: ''
        type: AppMetadataCache
    inheritanceDescription: <b>Inherited From</b> CacheManager.getAppMetadataFilteredBy
  - name: getAuthorityMetadataByAlias(string)
    uid: '@azure/msal-node.NodeStorage.getAuthorityMetadataByAlias'
    package: '@azure/msal-node'
    summary: retrieve authorityMetadata that contains a matching alias
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthorityMetadataByAlias(host: string):
        AuthorityMetadataEntity | null
      parameters:
        - id: host
          type: string
          description: ''
      return:
        description: ''
        type: AuthorityMetadataEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.getAuthorityMetadataByAlias
  - name: getCredentialsFilteredBy(CredentialFilter)
    uid: '@azure/msal-node.NodeStorage.getCredentialsFilteredBy'
    package: '@azure/msal-node'
    summary: >-
      retrieve credentails matching all provided filters; if no filter is set,
      get all credentials
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCredentialsFilteredBy(filter: CredentialFilter):
        CredentialCache
      parameters:
        - id: filter
          type: CredentialFilter
          description: ''
      return:
        description: ''
        type: CredentialCache
    inheritanceDescription: <b>Inherited From</b> CacheManager.getCredentialsFilteredBy
  - name: 'isAppMetadataFOCI(string, string)'
    uid: '@azure/msal-node.NodeStorage.isAppMetadataFOCI'
    package: '@azure/msal-node'
    summary: Return the family_id value associated  with FOCI
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isAppMetadataFOCI(environment: string, clientId: string):
        boolean
      parameters:
        - id: environment
          type: string
          description: ''
        - id: clientId
          type: string
          description: |+

      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> CacheManager.isAppMetadataFOCI
  - name: 'readAccessTokenFromCache(string, AccountInfo, BaseAuthRequest)'
    uid: '@azure/msal-node.NodeStorage.readAccessTokenFromCache'
    package: '@azure/msal-node'
    summary: Retrieve AccessTokenEntity from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAccessTokenFromCache(clientId: string, account:
        AccountInfo, request: BaseAuthRequest): AccessTokenEntity | null
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: account
          type: AccountInfo
          description: ''
        - id: request
          type: BaseAuthRequest
          description: ''
      return:
        description: ''
        type: AccessTokenEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readAccessTokenFromCache
  - name: readAccountFromCache(AccountInfo)
    uid: '@azure/msal-node.NodeStorage.readAccountFromCache'
    package: '@azure/msal-node'
    summary: Retrieve AccountEntity from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAccountFromCache(account: AccountInfo): AccountEntity |
        null
      parameters:
        - id: account
          type: AccountInfo
          description: |+

      return:
        description: ''
        type: AccountEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readAccountFromCache
  - name: readAccountFromCacheWithNativeAccountId(string)
    uid: '@azure/msal-node.NodeStorage.readAccountFromCacheWithNativeAccountId'
    package: '@azure/msal-node'
    summary: Retrieve AccountEntity from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAccountFromCacheWithNativeAccountId(nativeAccountId:
        string): AccountEntity | null
      parameters:
        - id: nativeAccountId
          type: string
          description: ''
      return:
        description: AccountEntity or Null
        type: AccountEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readAccountFromCacheWithNativeAccountId
  - name: 'readAppMetadataFromCache(string, string)'
    uid: '@azure/msal-node.NodeStorage.readAppMetadataFromCache'
    package: '@azure/msal-node'
    summary: Retrieve AppMetadataEntity from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAppMetadataFromCache(environment: string, clientId:
        string): AppMetadataEntity | null
      parameters:
        - id: environment
          type: string
          description: ''
        - id: clientId
          type: string
          description: ''
      return:
        description: ''
        type: AppMetadataEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readAppMetadataFromCache
  - name: 'readCacheRecord(AccountInfo, string, BaseAuthRequest, string)'
    uid: '@azure/msal-node.NodeStorage.readCacheRecord'
    package: '@azure/msal-node'
    summary: Retrieve the cached credentials into a cacherecord
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readCacheRecord(account: AccountInfo, clientId: string,
        request: BaseAuthRequest, environment: string): CacheRecord
      parameters:
        - id: account
          type: AccountInfo
          description: ''
        - id: clientId
          type: string
          description: ''
        - id: request
          type: BaseAuthRequest
          description: ''
        - id: environment
          type: string
          description: ''
      return:
        description: ''
        type: CacheRecord
    inheritanceDescription: <b>Inherited From</b> CacheManager.readCacheRecord
  - name: 'readIdTokenFromCache(string, AccountInfo)'
    uid: '@azure/msal-node.NodeStorage.readIdTokenFromCache'
    package: '@azure/msal-node'
    summary: Retrieve IdTokenEntity from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readIdTokenFromCache(clientId: string, account: AccountInfo):
        IdTokenEntity | null
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: account
          type: AccountInfo
          description: ''
      return:
        description: ''
        type: IdTokenEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readIdTokenFromCache
  - name: 'readRefreshTokenFromCache(string, AccountInfo, boolean)'
    uid: '@azure/msal-node.NodeStorage.readRefreshTokenFromCache'
    package: '@azure/msal-node'
    summary: Helper to retrieve the appropriate refresh token from cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readRefreshTokenFromCache(clientId: string, account:
        AccountInfo, familyRT: boolean): RefreshTokenEntity | null
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: account
          type: AccountInfo
          description: ''
        - id: familyRT
          type: boolean
          description: |+

      return:
        description: ''
        type: RefreshTokenEntity | null
    inheritanceDescription: <b>Inherited From</b> CacheManager.readRefreshTokenFromCache
  - name: removeAccount(string)
    uid: '@azure/msal-node.NodeStorage.removeAccount'
    package: '@azure/msal-node'
    summary: returns a boolean if the given account is removed
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAccount(accountKey: string): Promise<boolean>'
      parameters:
        - id: accountKey
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> CacheManager.removeAccount
  - name: removeAccountContext(AccountEntity)
    uid: '@azure/msal-node.NodeStorage.removeAccountContext'
    package: '@azure/msal-node'
    summary: Removes credentials associated with the provided account
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAccountContext(account: AccountEntity): Promise<boolean>'
      parameters:
        - id: account
          type: AccountEntity
          description: |+

      return:
        description: ''
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> CacheManager.removeAccountContext
  - name: removeAllAccounts()
    uid: '@azure/msal-node.NodeStorage.removeAllAccounts'
    package: '@azure/msal-node'
    summary: Removes all accounts and related tokens from cache.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllAccounts(): Promise<boolean>'
      return:
        description: ''
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> CacheManager.removeAllAccounts
  - name: removeAppMetadata()
    uid: '@azure/msal-node.NodeStorage.removeAppMetadata'
    package: '@azure/msal-node'
    summary: Removes all app metadata objects from cache.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAppMetadata(): boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> CacheManager.removeAppMetadata
  - name: removeCredential(CredentialEntity)
    uid: '@azure/msal-node.NodeStorage.removeCredential'
    package: '@azure/msal-node'
    summary: returns a boolean if the given credential is removed
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeCredential(credential: CredentialEntity):
        Promise<boolean>
      parameters:
        - id: credential
          type: CredentialEntity
          description: |+

      return:
        description: ''
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> CacheManager.removeCredential
  - name: saveCacheRecord(CacheRecord)
    uid: '@azure/msal-node.NodeStorage.saveCacheRecord'
    package: '@azure/msal-node'
    summary: saves a cache record
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function saveCacheRecord(cacheRecord: CacheRecord): Promise<void>'
      parameters:
        - id: cacheRecord
          type: CacheRecord
          description: |+

      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> CacheManager.saveCacheRecord
  - name: 'toObject<T>(T, object)'
    uid: '@azure/msal-node.NodeStorage.toObject'
    package: '@azure/msal-node'
    summary: Helper to convert serialized data to object
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function toObject<T>(obj: T, json: object): T'
      parameters:
        - id: obj
          type: T
          description: ''
        - id: json
          type: object
          description: |+

      return:
        description: ''
        type: T
    inheritanceDescription: <b>Inherited From</b> CacheManager.toObject
methods:
  - name: cacheToInMemoryCache(CacheKVStore)
    uid: '@azure/msal-node.NodeStorage.cacheToInMemoryCache'
    package: '@azure/msal-node'
    summary: Converts cacheKVStore to InMemoryCache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function cacheToInMemoryCache(cache: CacheKVStore): InMemoryCache'
      parameters:
        - id: cache
          type: <xref uid="@azure/msal-node.CacheKVStore" />
          description: |
            key value store
      return:
        description: ''
        type: <xref uid="@azure/msal-node.InMemoryCache" />
  - name: clear()
    uid: '@azure/msal-node.NodeStorage.clear'
    package: '@azure/msal-node'
    summary: Clears all cache entries created by MSAL (except tokens).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function clear(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: containsKey(string)
    uid: '@azure/msal-node.NodeStorage.containsKey'
    package: '@azure/msal-node'
    summary: Checks whether key is in cache.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function containsKey(key: string): boolean'
      parameters:
        - id: key
          type: string
          description: |
            look up key for a cache entity
      return:
        description: ''
        type: boolean
  - name: emitChange()
    uid: '@azure/msal-node.NodeStorage.emitChange'
    package: '@azure/msal-node'
    summary: Invoke the callback when cache changes
    remarks: ''
    isDeprecated: false
    syntax:
      content: function emitChange()
  - name: generateInMemoryCache(string)
    uid: '@azure/msal-node.NodeStorage.generateInMemoryCache'
    package: '@azure/msal-node'
    summary: Initialize in memory cache from an exisiting cache vault
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function generateInMemoryCache(cache: string): InMemoryCache'
      parameters:
        - id: cache
          type: string
          description: |
            blob formatted cache (JSON)
      return:
        description: ''
        type: <xref uid="@azure/msal-node.InMemoryCache" />
  - name: generateJsonCache(InMemoryCache)
    uid: '@azure/msal-node.NodeStorage.generateJsonCache'
    package: '@azure/msal-node'
    summary: retrieves the final JSON
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function generateJsonCache(inMemoryCache: InMemoryCache):
        JsonCache
      parameters:
        - id: inMemoryCache
          type: <xref uid="@azure/msal-node.InMemoryCache" />
          description: |
            itemised cache read from the JSON
      return:
        description: ''
        type: <xref uid="@azure/msal-node.JsonCache" />
  - name: getAccessTokenCredential(string)
    uid: '@azure/msal-node.NodeStorage.getAccessTokenCredential'
    package: '@azure/msal-node'
    summary: fetch the accessToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccessTokenCredential(accessTokenKey: string):
        AccessTokenEntity | null
      parameters:
        - id: accessTokenKey
          type: string
          description: |
            lookup key to fetch cache type AccessTokenEntity
      return:
        description: ''
        type: AccessTokenEntity | null
  - name: getAccount(string)
    uid: '@azure/msal-node.NodeStorage.getAccount'
    package: '@azure/msal-node'
    summary: fetch the account entity
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAccount(accountKey: string): AccountEntity | null'
      parameters:
        - id: accountKey
          type: string
          description: |
            lookup key to fetch cache type AccountEntity
      return:
        description: ''
        type: AccountEntity | null
  - name: getAppMetadata(string)
    uid: '@azure/msal-node.NodeStorage.getAppMetadata'
    package: '@azure/msal-node'
    summary: fetch appMetadata entity from the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAppMetadata(appMetadataKey: string): AppMetadataEntity |
        null
      parameters:
        - id: appMetadataKey
          type: string
          description: |
            lookup key to fetch cache type AppMetadataEntity
      return:
        description: ''
        type: AppMetadataEntity | null
  - name: getAuthorityMetadata(string)
    uid: '@azure/msal-node.NodeStorage.getAuthorityMetadata'
    package: '@azure/msal-node'
    summary: fetch authority metadata entity from the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAuthorityMetadata(key: string): AuthorityMetadataEntity |
        null
      parameters:
        - id: key
          type: string
          description: |
            lookup key to fetch cache type AuthorityMetadataEntity
      return:
        description: ''
        type: AuthorityMetadataEntity | null
  - name: getAuthorityMetadataKeys()
    uid: '@azure/msal-node.NodeStorage.getAuthorityMetadataKeys'
    package: '@azure/msal-node'
    summary: Get all authority metadata keys
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAuthorityMetadataKeys(): Array<string>'
      return:
        description: ''
        type: Array&lt;string&gt;
  - name: getCache()
    uid: '@azure/msal-node.NodeStorage.getCache'
    package: '@azure/msal-node'
    summary: get the current cache key-value store
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCache(): CacheKVStore'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.CacheKVStore" />
  - name: getIdTokenCredential(string)
    uid: '@azure/msal-node.NodeStorage.getIdTokenCredential'
    package: '@azure/msal-node'
    summary: fetch the idToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getIdTokenCredential(idTokenKey: string): IdTokenEntity | null'
      parameters:
        - id: idTokenKey
          type: string
          description: |
            lookup key to fetch cache type IdTokenEntity
      return:
        description: ''
        type: IdTokenEntity | null
  - name: getInMemoryCache()
    uid: '@azure/msal-node.NodeStorage.getInMemoryCache'
    package: '@azure/msal-node'
    summary: gets the current in memory cache for the client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getInMemoryCache(): InMemoryCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-node.InMemoryCache" />
  - name: getItem(string)
    uid: '@azure/msal-node.NodeStorage.getItem'
    package: '@azure/msal-node'
    summary: Gets cache item with given key.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getItem(key: string): ValidCacheType'
      parameters:
        - id: key
          type: string
          description: |
            lookup key for the cache entry
      return:
        description: ''
        type: ValidCacheType
  - name: getKeys()
    uid: '@azure/msal-node.NodeStorage.getKeys'
    package: '@azure/msal-node'
    summary: Gets all keys in window.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getKeys(): string[]'
      return:
        description: ''
        type: 'string[]'
  - name: getRefreshTokenCredential(string)
    uid: '@azure/msal-node.NodeStorage.getRefreshTokenCredential'
    package: '@azure/msal-node'
    summary: fetch the refreshToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRefreshTokenCredential(refreshTokenKey: string):
        RefreshTokenEntity | null
      parameters:
        - id: refreshTokenKey
          type: string
          description: |
            lookup key to fetch cache type RefreshTokenEntity
      return:
        description: ''
        type: RefreshTokenEntity | null
  - name: getServerTelemetry(string)
    uid: '@azure/msal-node.NodeStorage.getServerTelemetry'
    package: '@azure/msal-node'
    summary: fetch server telemetry entity from the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServerTelemetry(serverTelemetrykey: string):
        ServerTelemetryEntity | null
      parameters:
        - id: serverTelemetrykey
          type: string
          description: |
            lookup key to fetch cache type ServerTelemetryEntity
      return:
        description: ''
        type: ServerTelemetryEntity | null
  - name: getThrottlingCache(string)
    uid: '@azure/msal-node.NodeStorage.getThrottlingCache'
    package: '@azure/msal-node'
    summary: fetch throttling entity from the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getThrottlingCache(throttlingCacheKey: string):
        ThrottlingEntity | null
      parameters:
        - id: throttlingCacheKey
          type: string
          description: |
            lookup key to fetch cache type ThrottlingEntity
      return:
        description: ''
        type: ThrottlingEntity | null
  - name: inMemoryCacheToCache(InMemoryCache)
    uid: '@azure/msal-node.NodeStorage.inMemoryCacheToCache'
    package: '@azure/msal-node'
    summary: converts inMemoryCache to CacheKVStore
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function inMemoryCacheToCache(inMemoryCache: InMemoryCache):
        CacheKVStore
      parameters:
        - id: inMemoryCache
          type: <xref uid="@azure/msal-node.InMemoryCache" />
          description: |
            kvstore map for inmemory
      return:
        description: ''
        type: <xref uid="@azure/msal-node.CacheKVStore" />
  - name: registerChangeEmitter(() => void)
    uid: '@azure/msal-node.NodeStorage.registerChangeEmitter'
    package: '@azure/msal-node'
    summary: Queue up callbacks
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function registerChangeEmitter(func: () => void)'
      parameters:
        - id: func
          type: () =&gt; void
          description: |
            a callback function for cache change indication
  - name: removeItem(string)
    uid: '@azure/msal-node.NodeStorage.removeItem'
    package: '@azure/msal-node'
    summary: Removes the cache item from memory with the given key.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeItem(key: string): boolean'
      parameters:
        - id: key
          type: string
          description: lookup key to remove a cache entity
      return:
        description: ''
        type: boolean
  - name: setAccessTokenCredential(AccessTokenEntity)
    uid: '@azure/msal-node.NodeStorage.setAccessTokenCredential'
    package: '@azure/msal-node'
    summary: set accessToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setAccessTokenCredential(accessToken: AccessTokenEntity)'
      parameters:
        - id: accessToken
          type: AccessTokenEntity
          description: |
            cache value to be set of type AccessTokenEntity
  - name: setAccount(AccountEntity)
    uid: '@azure/msal-node.NodeStorage.setAccount'
    package: '@azure/msal-node'
    summary: set account entity
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setAccount(account: AccountEntity)'
      parameters:
        - id: account
          type: AccountEntity
          description: |
            cache value to be set of type AccountEntity
  - name: setAppMetadata(AppMetadataEntity)
    uid: '@azure/msal-node.NodeStorage.setAppMetadata'
    package: '@azure/msal-node'
    summary: set appMetadata entity to the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setAppMetadata(appMetadata: AppMetadataEntity)'
      parameters:
        - id: appMetadata
          type: AppMetadataEntity
          description: |
            cache value to be set of type AppMetadataEntity
  - name: 'setAuthorityMetadata(string, AuthorityMetadataEntity)'
    uid: '@azure/msal-node.NodeStorage.setAuthorityMetadata'
    package: '@azure/msal-node'
    summary: set authority metadata entity to the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAuthorityMetadata(key: string, metadata:
        AuthorityMetadataEntity)
      parameters:
        - id: key
          type: string
          description: lookup key to fetch cache type AuthorityMetadataEntity
        - id: metadata
          type: AuthorityMetadataEntity
          description: |
            cache value to be set of type AuthorityMetadataEntity
  - name: setCache(CacheKVStore)
    uid: '@azure/msal-node.NodeStorage.setCache'
    package: '@azure/msal-node'
    summary: sets the current cache (key value store)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setCache(cache: CacheKVStore)'
      parameters:
        - id: cache
          type: <xref uid="@azure/msal-node.CacheKVStore" />
          description: ''
  - name: setIdTokenCredential(IdTokenEntity)
    uid: '@azure/msal-node.NodeStorage.setIdTokenCredential'
    package: '@azure/msal-node'
    summary: set idToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setIdTokenCredential(idToken: IdTokenEntity)'
      parameters:
        - id: idToken
          type: IdTokenEntity
          description: |
            cache value to be set of type IdTokenEntity
  - name: setInMemoryCache(InMemoryCache)
    uid: '@azure/msal-node.NodeStorage.setInMemoryCache'
    package: '@azure/msal-node'
    summary: sets the current in memory cache for the client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setInMemoryCache(inMemoryCache: InMemoryCache)'
      parameters:
        - id: inMemoryCache
          type: <xref uid="@azure/msal-node.InMemoryCache" />
          description: |
            key value map in memory
  - name: 'setItem(string, ValidCacheType)'
    uid: '@azure/msal-node.NodeStorage.setItem'
    package: '@azure/msal-node'
    summary: Gets cache item with given key-value
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setItem(key: string, value: ValidCacheType)'
      parameters:
        - id: key
          type: string
          description: lookup key for the cache entry
        - id: value
          type: ValidCacheType
          description: |
            value of the cache entry
  - name: setRefreshTokenCredential(RefreshTokenEntity)
    uid: '@azure/msal-node.NodeStorage.setRefreshTokenCredential'
    package: '@azure/msal-node'
    summary: set refreshToken credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setRefreshTokenCredential(refreshToken: RefreshTokenEntity)'
      parameters:
        - id: refreshToken
          type: RefreshTokenEntity
          description: |
            cache value to be set of type RefreshTokenEntity
  - name: 'setServerTelemetry(string, ServerTelemetryEntity)'
    uid: '@azure/msal-node.NodeStorage.setServerTelemetry'
    package: '@azure/msal-node'
    summary: set server telemetry entity to the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setServerTelemetry(serverTelemetryKey: string, serverTelemetry:
        ServerTelemetryEntity)
      parameters:
        - id: serverTelemetryKey
          type: string
          description: lookup key to fetch cache type ServerTelemetryEntity
        - id: serverTelemetry
          type: ServerTelemetryEntity
          description: |
            cache value to be set of type ServerTelemetryEntity
  - name: 'setThrottlingCache(string, ThrottlingEntity)'
    uid: '@azure/msal-node.NodeStorage.setThrottlingCache'
    package: '@azure/msal-node'
    summary: set throttling entity to the platform cache
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setThrottlingCache(throttlingCacheKey: string, throttlingCache:
        ThrottlingEntity)
      parameters:
        - id: throttlingCacheKey
          type: string
          description: lookup key to fetch cache type ThrottlingEntity
        - id: throttlingCache
          type: ThrottlingEntity
          description: |
            cache value to be set of type ThrottlingEntity
  - name: 'updateCredentialCacheKey(string, ValidCredentialType)'
    uid: '@azure/msal-node.NodeStorage.updateCredentialCacheKey'
    package: '@azure/msal-node'
    summary: Updates a credential's cache key if the current cache key is outdated
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateCredentialCacheKey(currentCacheKey: string, credential:
        ValidCredentialType): string
      parameters:
        - id: currentCacheKey
          type: string
          description: ''
        - id: credential
          type: ValidCredentialType
          description: ''
      return:
        description: ''
        type: string
extends: CacheManager
