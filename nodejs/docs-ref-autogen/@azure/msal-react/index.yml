### YamlMime:TSPackage
uid: '@azure/msal-react'
name: '@azure/msal-react'
summary: ''
type: package
interfaces:
  - '@azure/msal-react.IMsalContext'
typeAliases:
  - '@azure/msal-react.MsalProviderProps'
  - '@azure/msal-react.AuthenticatedTemplateProps'
  - '@azure/msal-react.MsalAuthenticationProps'
  - '@azure/msal-react.UnauthenticatedTemplateProps'
  - '@azure/msal-react.WithMsalProps'
  - '@azure/msal-react.MsalAuthenticationResult'
  - '@azure/msal-react.AccountIdentifiers'
  - '@azure/msal-react.FaaCFunction'
  - '@azure/msal-react.SetComplement'
  - '@azure/msal-react.SetDifference'
  - '@azure/msal-react.Subtract'
functions:
  - name: 'MsalProvider({ children: any, instance: any })'
    uid: '@azure/msal-react.MsalProvider'
    package: '@azure/msal-react'
    summary: >-
      MSAL context provider component. This must be rendered above any other
      components that use MSAL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function MsalProvider(__namedParameters: { children: any, instance: any
        }): React.ReactElement
      parameters:
        - id: __namedParameters
          type: '{ children: any, instance: any }'
          description: ''
      return:
        description: ''
        type: <xref uid="React.ReactElement" />
  - name: >-
      AuthenticatedTemplate({ children: any, homeAccountId: any, localAccountId:
      any, username: any })
    uid: '@azure/msal-react.AuthenticatedTemplate'
    package: '@azure/msal-react'
    summary: Renders child components if user is authenticated
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function AuthenticatedTemplate(__namedParameters: { children: any,
        homeAccountId: any, localAccountId: any, username: any }):
        React.ReactElement | null
      parameters:
        - id: __namedParameters
          type: >-
            { children: any, homeAccountId: any, localAccountId: any, username:
            any }
          description: ''
      return:
        description: ''
        type: <xref uid="React.ReactElement" /> | null
  - name: >-
      MsalAuthenticationTemplate({ ErrorComponent: any, LoadingComponent: any,
      authenticationRequest: any, children: any, homeAccountId: any,
      interactionType: any, localAccountId: any, username: any })
    uid: '@azure/msal-react.MsalAuthenticationTemplate'
    package: '@azure/msal-react'
    summary: >-
      Attempts to authenticate user if not already authenticated, then renders
      child components
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function MsalAuthenticationTemplate(__namedParameters: { ErrorComponent:
        any, LoadingComponent: any, authenticationRequest: any, children: any,
        homeAccountId: any, interactionType: any, localAccountId: any, username:
        any }): React.ReactElement | null
      parameters:
        - id: __namedParameters
          type: >-
            { ErrorComponent: any, LoadingComponent: any, authenticationRequest:
            any, children: any, homeAccountId: any, interactionType: any,
            localAccountId: any, username: any }
          description: ''
      return:
        description: ''
        type: <xref uid="React.ReactElement" /> | null
  - name: >-
      UnauthenticatedTemplate({ children: any, homeAccountId: any,
      localAccountId: any, username: any })
    uid: '@azure/msal-react.UnauthenticatedTemplate'
    package: '@azure/msal-react'
    summary: Renders child components if user is unauthenticated
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function UnauthenticatedTemplate(__namedParameters: { children: any,
        homeAccountId: any, localAccountId: any, username: any }):
        React.ReactElement | null
      parameters:
        - id: __namedParameters
          type: >-
            { children: any, homeAccountId: any, localAccountId: any, username:
            any }
          description: ''
      return:
        description: ''
        type: <xref uid="React.ReactElement" /> | null
  - name: useAccount(AccountIdentifiers)
    uid: '@azure/msal-react.useAccount'
    package: '@azure/msal-react'
    summary: >-
      Given 1 or more accountIdentifiers, returns the Account object if the user
      is signed-in
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useAccount(accountIdentifiers?: AccountIdentifiers):
        AccountInfo | null
      parameters:
        - id: accountIdentifiers
          type: <xref uid="@azure/msal-react.AccountIdentifiers" />
          description: |+

      return:
        description: ''
        type: AccountInfo | null
  - name: useIsAuthenticated(AccountIdentifiers)
    uid: '@azure/msal-react.useIsAuthenticated'
    package: '@azure/msal-react'
    summary: >-
      Returns whether or not a user is currently signed-in. Optionally provide 1
      or more accountIdentifiers to determine if a specific user is signed-in
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean'
      parameters:
        - id: matchAccount
          type: <xref uid="@azure/msal-react.AccountIdentifiers" />
          description: |+

      return:
        description: ''
        type: boolean
  - name: >-
      useMsalAuthentication(InteractionType, PopupRequest | RedirectRequest |
      SsoSilentRequest, AccountIdentifiers)
    uid: '@azure/msal-react.useMsalAuthentication'
    package: '@azure/msal-react'
    summary: >-
      If a user is not currently signed in this hook invokes a login. Failed
      logins can be retried using the login callback returned.

      If a user is currently signed in this hook attempts to acquire a token.
      Subsequent token requests can use the acquireToken callback returned.

      Optionally provide a request object to be used in the login/acquireToken
      call.

      Optionally provide a specific user that should be logged in.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useMsalAuthentication(interactionType: InteractionType,
        authenticationRequest?: PopupRequest | RedirectRequest |
        SsoSilentRequest, accountIdentifiers?: AccountIdentifiers):
        MsalAuthenticationResult
      parameters:
        - id: interactionType
          type: InteractionType
          description: ''
        - id: authenticationRequest
          type: PopupRequest | RedirectRequest | SsoSilentRequest
          description: ''
        - id: accountIdentifiers
          type: <xref uid="@azure/msal-react.AccountIdentifiers" />
          description: |+

      return:
        description: ''
        type: <xref uid="@azure/msal-react.MsalAuthenticationResult" />
  - name: >-
      accountArraysAreEqual(Array<AccountIdentifiers>,
      Array<AccountIdentifiers>)
    uid: '@azure/msal-react.accountArraysAreEqual'
    package: '@azure/msal-react'
    summary: |-
      Helper function to determine whether 2 arrays are equal
      Used to avoid unnecessary state updates
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>,
        arrayB: Array<AccountIdentifiers>): boolean
      parameters:
        - id: arrayA
          type: Array&lt;<xref uid="@azure/msal-react.AccountIdentifiers" />&gt;
          description: ''
        - id: arrayB
          type: Array&lt;<xref uid="@azure/msal-react.AccountIdentifiers" />&gt;
          description: |+

      return:
        description: ''
        type: boolean
  - name: 'getAccountByIdentifiers(AccountInfo[], AccountIdentifiers)'
    uid: '@azure/msal-react.getAccountByIdentifiers'
    package: '@azure/msal-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountByIdentifiers(allAccounts: AccountInfo[],
        accountIdentifiers: AccountIdentifiers): AccountInfo | null
      parameters:
        - id: allAccounts
          type: 'AccountInfo[]'
          description: ''
        - id: accountIdentifiers
          type: <xref uid="@azure/msal-react.AccountIdentifiers" />
          description: ''
      return:
        description: ''
        type: AccountInfo | null
  - name: 'getChildrenOrFunction<T>(React.ReactNode | FaaCFunction, T)'
    uid: '@azure/msal-react.getChildrenOrFunction'
    package: '@azure/msal-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChildrenOrFunction<T>(children: React.ReactNode |
        FaaCFunction, args: T): React.ReactNode
      parameters:
        - id: children
          type: >-
            <xref uid="React.ReactNode" /> | <xref
            uid="@azure/msal-react.FaaCFunction" />
          description: ''
        - id: args
          type: T
          description: ''
      return:
        description: ''
        type: <xref uid="React.ReactNode" />
